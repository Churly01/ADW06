/* APARTADO 2 DEL ENUNCIADO  */
/* Create a stream from the logstash topic */

SET 'auto.offset.reset'='earliest';

/* CREATE STREAM FROM LOGSTASH  */
CREATE STREAM IF NOT EXISTS ADW06_APACHE_RAW (
	TIMESTAMP STRING,
	`@timestamp` STRING,
		TAG STRING,
	USER_AGENT STRUCT<
		UAID STRING,
		ORIGINAL STRING,
		OS STRUCT<
		    `FULL` STRING,
		    VERSION STRING,	
		    NAME STRING>,
		DEVICE STRUCT<NAME STRING>,
		VERSION STRING,
		NAME STRING>,	
	GEOIP STRUCT<IP STRING,
		`AS` STRUCT<ORGANIZATION STRUCT<NAME STRING>, NUMBER INT>,	
		GEO STRUCT<COUNTRY_NAME STRING,
				TIMEZONE STRING,
				COUNTRY_ISO_CODE STRING,
				REGION_ISO_CODE STRING,
				REGION_NAME STRING,
				CITY_NAME STRING,
				LOCATION STRUCT<LON DOUBLE, LAT DOUBLE>,
				CONTINENT_CODE STRING,
				POSTAL_CODE STRING>>,
	HTTP STRUCT<RESPONSE STRUCT<STATUS_CODE INT, BODY STRUCT<BYTES INT>>,	
		REQUEST STRUCT<METHOD STRING>,
		VERSION STRING>,
	URL STRUCT<ORIGINAL STRING>   )
	WITH (KAFKA_TOPIC='logstash', VALUE_FORMAT='JSON');

 
CREATE SOURCE CONNECTOR IF NOT EXISTS `adw06-monitor-jdbc-source` WITH (
	'connector.class'='io.confluent.connect.jdbc.JdbcSourceConnector',
	'connection.url'='jdbc:mysql://mysql:3306/kafka',
	'connection.user' = 'kafka',
	'connection.password'='kpwd23',
	'mode'='incrementing',
	'incrementing.column.name'='idrt',
	'validate.non.null'='false',
	'table.whitelist'='monitor',
	'topic.prefix'='adw.06.',
	'value.converter.schemas.enable'='false',
	'key.converter.schemas.enable'='false',	
	'key.converter' = 'org.apache.kafka.connect.json.JsonConverter',
	'value.converter' = 'org.apache.kafka.connect.json.JsonConverter'
); 

CREATE STREAM IF NOT EXISTS ADW06_MONITOR (
	idrt INT,
	IP STRING,
	UAID STRING,
	NV INT,
	UV TIMESTAMP,
	rtreg TIMESTAMP)
WITH (KAFKA_TOPIC='adw.06.monitor', VALUE_FORMAT='JSON');

CREATE STREAM IF NOT EXISTS ADW06_KEYMON
       WITH (KAFKA_TOPIC='adw.06.keymon', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO')
       AS SELECT idrt, IP, UAID, NV, UV,  STRUCT(IP:=IP, UAID:=UAID) AS KEY
       FROM adw06_monitor
       PARTITION BY STRUCT(IP:=IP, UAID:=UAID);
-- // PARA EL SERVIDOR DE EIBE...GRRR
-- CREATE STREAM IF NOT EXISTS adw06_monitor (
-- 	idrt INT,
-- 	IP STRING,
-- 	UAID STRING,
-- 	NV INT,
-- 	UV TIMESTAMP,
-- 	rtreg TIMESTAMP)
-- WITH (KAFKA_TOPIC='adw.2306.monitor', VALUE_FORMAT='JSON', PARTITIONS=2, REPLICAS=2);

CREATE STREAM IF NOT EXISTS ADW06_ACCESO
  WITH (KAFKA_TOPIC='adw.06.acceso', VALUE_FORMAT='AVRO')
  AS SELECT
  geoip->ip as IP,
  url->original as URL,
  http->request->method as METHOD,
  http->response->status_code as STATUS_CODE,
  http->response->body->bytes as BYTES,
  http->version as VHTTP,
  user_agent->uaid as UAID,
  user_agent->original as ORIGINAL,
  user_agent->version as VUA,
  user_agent->os->name +
  user_agent->os->`FULL` as OSINFO,  
  PARSE_TIMESTAMP(TIMESTAMP, 'dd/MMM/yyyy:HH:mm:ss Z', 'UTC') as TS 
  FROM adw06_apache_raw
  WHERE tag='2306'
  AND user_agent->uaid IS NOT NULL
  AND geoip->ip IS NOT NULL;


CREATE STREAM IF NOT EXISTS ADW06_KEYACC
  WITH (KAFKA_TOPIC='adw.06.keyacc', VALUE_FORMAT='AVRO', KEY_FORMAT='AVRO')
  AS SELECT
     IP,
     URL,
     METHOD,
     STATUS_CODE,
     BYTES,
     VHTTP,
     UAID,
     ORIGINAL,
     VUA,
     OSINFO,
     TS,
     STRUCT(IP:=IP, UAID:=UAID) as KEY
  FROM adw06_acceso
  PARTITION BY STRUCT(IP:=IP, UAID:=UAID);

CREATE TABLE IF NOT EXISTS ADW06_NACC
       WITH (KAFKA_TOPIC='adw.06.nacc', VALUE_FORMAT='AVRO', KEY_FORMAT='AVRO')
       AS SELECT
              STRUCT(IP:=IP, UAID:=UAID) as KEY,
	      COUNT(*) as N
       FROM adw06_keyacc
       GROUP BY  STRUCT(IP:=IP, UAID:=UAID);



CREATE TABLE IF NOT EXISTS ADW06_GEOIP
  WITH (KAFKA_TOPIC='adw.06.geoip', VALUE_FORMAT='AVRO', KEY_FORMAT='AVRO')
AS SELECT
  GEOIP as KEY,
  GEOIP->IP AS IP,
  GEOIP->`AS`->ORGANIZATION->NAME AS NOMORG,
  GEOIP->`AS`->NUMBER AS NUMORG,
  GEOIP->GEO->POSTAL_CODE AS POSTAL_CODE,
  GEOIP->GEO->CITY_NAME AS CITY_NAME,
  GEOIP->GEO->COUNTRY_NAME AS COUNTRY_NAME,
  GEOIP->GEO->COUNTRY_ISO_CODE AS COUNTRY_ISO_CODE,
  GEOIP->GEO->REGION_NAME AS REGION_NAME,
  GEOIP->GEO->REGION_ISO_CODE AS REGION_ISO_CODE,
  GEOIP->GEO->CONTINENT_CODE AS CONTINENT_CODE,
  GEOIP->GEO->TIMEZONE AS TIMEZONE,
  GEOIP->GEO->LOCATION->LON AS LON,
  GEOIP->GEO->LOCATION->LAT AS LAT,
  COUNT(*) AS IPC
FROM ADW06_APACHE_RAW
WHERE tag='2306'
      AND GEOIP->IP IS NOT NULL
      AND USER_AGENT->UAID IS NOT NULL
GROUP BY GEOIP;

/* Create SINK Connector. pk.mode is record_value (we take a value from a record, IP, to be PK of each value) */
CREATE SINK CONNECTOR IF NOT EXISTS `adw06-geoip-jdbc-sink` WITH(
    "connector.class" = 'io.confluent.connect.jdbc.JdbcSinkConnector',
    "connection.url" = 'jdbc:mysql://mysql:3306/kafka',
    "topics" = 'adw.06.geoip',
    "table.name.format" = 'geoip',
    "key.converter" = 'io.confluent.connect.avro.AvroConverter',
    "key.converter.schema.registry.url" = 'http://schema-registry:8081',
    "key.converter.schemas.enable" = 'true',
    "value.converter" = 'io.confluent.connect.avro.AvroConverter',
    "value.converter.schema.registry.url" = 'http://schema-registry:8081',
    "value.converter.schemas.enable" = 'true',
    "connection.user" = 'kafka',
    "connection.password" = 'kpwd23',
    "auto.create" = 'false',
    "pk.mode" = 'record_value',
    "pk.fields" = 'IP',
    "insert.mode" = 'upsert',
    "delete.enabled" = 'false',
    "tasks.max" = '1');

CREATE TABLE IF NOT EXISTS 2306_Q1 WITH (KAFKA_TOPIC='adw.2306.Q1')
        AS SELECT
       	MSK.KEY AS KEY,
	MSK.NV AS V,
	COUNT(AFK.http) AS N
FROM 2306_monitor_stream_keyed MSK
	INNER JOIN 2306_apache_filtered_keyed AFK
	WITHIN 300 DAYS
	GRACE PERIOD 15 MINUTES
	ON AFK.KEY = MSK.KEY
GROUP BY MSK.KEY, MSK.NV;

CREATE TABLE IF NOT EXISTS 2306_Q2
	WITH (KAFKA_TOPIC='adw.2306.Q2')
	AS
	SELECT MSK.KEY AS KEY,
		ARRAY[MAX(MSK.UV)] AS UV,
		COLLECT_SET(AFK.HTTP->REQUEST->METHOD) AS MET,
		COLLECT_SET(AFK.HTTP->RESPONSE->STATUS_CODE) AS STC,
		COUNT(AFK.http) AS N
	FROM 2306_monitor_stream_keyed MSK
		INNER JOIN 2306_apache_filtered_keyed AFK
		WITHIN 300 DAYS
		GRACE PERIOD 15 MINUTES
		ON AFK.KEY = MSK.KEY
	WHERE MSK.KEY->UAID= '6248c7a654ab4c1061918e0801cb074f5f01983d'
	GROUP BY MSK.KEY;

/* QUERIES */

/* Q1 */
SELECT	MSK.KEY AS KEY,
	MSK.NV AS V,
	COUNT(AFK.http) AS N
FROM 2306_monitor_stream_keyed MSK
	INNER JOIN 2306_apache_filtered_keyed AFK
	WITHIN 300 DAYS
	GRACE PERIOD 15 MINUTES
	ON AFK.KEY = MSK.KEY
GROUP BY MSK.KEY, MSK.NV
EMIT CHANGES;
-- limit 7;

--SELECT * FROM 2306_Q1;


/* Q2 */

SELECT MSK.KEY AS KEY,
	ARRAY[MAX(MSK.UV)] AS UV,
	COLLECT_SET(AFK.HTTP->REQUEST->METHOD) AS MET,
	COLLECT_SET(AFK.HTTP->RESPONSE->STATUS_CODE) AS STC,
	COUNT(AFK.http) AS N
FROM 2306_monitor_stream_keyed MSK
INNER JOIN 2306_apache_filtered_keyed AFK
WITHIN 300 DAYS
GRACE PERIOD 15 MINUTES
ON AFK.KEY = MSK.KEY
WHERE MSK.KEY->UAID= '6248c7a654ab4c1061918e0801cb074f5f01983d'
GROUP BY MSK.KEY
EMIT CHANGES
limit 3; 

--SELECT * FROM 2306_Q2;
